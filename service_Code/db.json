{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/apple-touch-icon.png.png","path":"apple-touch-icon.png.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/apple-touch-icon.png.png","hash":"d4b51f101e127f9ab0638f61c9b92778991b542f","modified":1536572994000},{"_id":"themes/BlueLake/.DS_Store","hash":"1d21abd8cc2799eee4b88e9d87dc6a12eda85cd5","modified":1536282653000},{"_id":"source/favicon.ico","hash":"82f16617512aa82ccfacc6f2758cfcd6ab7ad3b4","modified":1536572509000},{"_id":"source/.DS_Store","hash":"826468f9da1299d832b8123f63a1b3590d8549a3","modified":1536573343000},{"_id":"themes/BlueLake/_config.yml","hash":"d78d05d3e77c61e5e26b1e90db69b433f14985f7","modified":1536283396000},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1536282133000},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1536282133000},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1536282133000},{"_id":"source/_posts/教你如何轻松搭建属于自己的博客.md","hash":"b82cc5073f63d19033a7a5a70f3a8120520ccf7f","modified":1536553410000},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1536282133000},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1536282133000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1536282133000},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1536282133000},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1536282133000},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1536282133000},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1536282133000},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1536282133000},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1536282133000},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1536282133000},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1536282133000},{"_id":"themes/BlueLake/layout/base.jade","hash":"2e65a06a499fbb67c72f8345d71222e40e9ef523","modified":1536282133000},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1536282133000},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1536282133000},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1536282133000},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1536282133000},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1536282133000},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1536282133000},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1536282133000},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1536282133000},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1536282133000},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1536282133000},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1536282133000},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1536282133000},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1536282133000},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1536282133000},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1536282133000},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1536282133000},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1536282133000},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1536282133000},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1536282133000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"教你如何轻松搭建属于自己的博客","date":"2018-09-07T01:29:56.000Z","_content":"\n## 一，Mac下利用Hexo+GitHub轻松搭建自己的博客\n### Hexo安装\n#### 1，基本流程：\n###### 1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew\n###### 2.homebrew安装需要依赖ruby\n###### 3.安装顺序：homebrew---->node.js---->hexo\n#### 2，具体安装流程：\n##### 1,检查安装ruby终端命令：\t\n###### 检查是否安装ruby \n    ruby -v\n###### 如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\n    \n##### 2,安装homebrew终端命令：\t \n                  \n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n##### 3,安装nodejs终端命令：\n\n\tbrew install node\n\t\n###### 在安装nodejs过程中，提示如下警告：\n\tYou have Xcode 8 installed without the CLT;\n###### 根据提示进行安装\n\t\t\n##### 4，安装hexo终端命令:\n\n\tsudo npm install -g hexo\n### Hexo安装成功\n\n### 本地工作空间\n###### 1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\n\tmkdir blog \t\t新建文件\n\tcd blog \t\t\t打开新建的文件\n\thexo init\t\t在当前文件夹中初始化hexo\n###### 2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\n\thexo generate \t/** 生成一套静态网页 **/\n\thexo server \t\t/** 在服务器上运行 **/\n###### 3，在浏览器中打开下面的地址，就可以看到默认的界面主页\n\thttp://localhost:4000\n### 本地工作空间创建完毕\n\n### 关联到GitHub\n###### 1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\n\tHexo的每一个功能的配置文件都是_config.yml， 具体说明看下面的注解：\n\t# Hexo Configuration\n\t## Docs: https://hexo.io/docs/configuration.html\n\t## Source: https://github.com/hexojs/hexo/\n \n\t# Site                 ##修改以适应搜索引擎的收录\n\ttitle: Hexo            ##定义网站的标题\n\tsubtitle:              ##定义网站的副标题\n\tdescription:           ##定义网站的描述\n\tauthor: jason jwl      ##定义网站的负责人\n\tlanguage:              ##定义网站的语言,默认zh-Hans\n\ttimezone:              ##定义网站的时区\n \n\t# URL\n\t## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\turl: http://yoursite.com   ##定义网站访问的域名\n\troot: /      ##定义所在Web文件夹在哪个目录\n\tpermalink: :year/:month/:day/:title/  ##定义时间格式\n\tpermalink_defaults:\n \n\t# Directory\n\tsource_dir: source   ##定义从哪个文件夹获取博客资料\n\tpublic_dir: public   ##定义生成静态网站到哪个文件夹\n \n\tarchive_dir: archives\n\tcategory_dir: categories\n\tcode_dir: downloads/code\n\ti18n_dir: :lang\n\tskip_render:\n \n\t# Writing\n\tnew_post_name: :title.md # File name of new posts\n\tdefault_layout: post\n\ttitlecase: false # Transform title into titlecase\n\texternal_link: true # Open external links in new tab\n\tfilename_case: 0\n\trender_drafts: false\n\tpost_asset_folder: false\n\trelative_link: false\n\tfuture: true\n\thighlight:\n  \tenable: true\n  \tline_number: true\n  \tauto_detect: false\n  \ttab_replace:\n \n\t# Category & Tag\n\tdefault_category: uncategorized\n\tcategory_map:\n\ttag_map:\n \n\t# Date / Time format\n\t## Hexo uses Moment.js to parse and display date\n\t## You can customize the date format as defined in\n\t## http://momentjs.com/docs/#/displaying/format/\n\tdate_format: YYYY-MM-DD\n\ttime_format: HH:mm:ss\n \n\t# Pagination\n\t## Set per_page to 0 to disable pagination\n\tper_page: 10  ##定义每一页多少条博客\n\tpagination_dir: page\n \n\t# Extensions\n\t## Plugins: https://hexo.io/plugins/\n\t## Themes: https://hexo.io/themes/\n\ttheme: landscape  ##定义使用的主题\n \n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \ttype:\n###### 那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\n\tdeploy:\n  \t\ttype: git\n  \t\trepo: https://github.com/xxx/xxx.github.io.git\n  \t\tbranch: master\n  （xxx为个人github的name）\n### 关联到GitHub完成\n\n### 让我们来创建一篇自己的博客吧\n###### 首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\n\thexo new post \"我的第一篇博客\"\n\t(注意，该文件可以使用Markdown的编辑文件编辑，Hexo会自动转化为静态页面)\n###### 然后输入：hexo generate 或者 hexo g \t/** 生成一套静态网页 **/\n###### 最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。\n### 创建一篇自己的博客完成\n\n### 如何访问GitHub上的静态页面呢\n###### 从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\n### 创建自己的GitHub Pages\n### 创建自己的GitHub Pages完成\n\n### 快速、简洁且高效的博客框架\n###### Hexo官网：\nhttps://hexo.io/zh-cn/\n\n### 一款比较漂亮的博客主题\n###### 资源地址[themes](https://hexo.io/themes/)\n###### 资源地址[theme](https://chaoo.oschina.io)\n\t\n \n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n","source":"_posts/教你如何轻松搭建属于自己的博客.md","raw":"---\ntitle: 教你如何轻松搭建属于自己的博客\ndate: 2018-09-07 09:29:56\ntags: hexo\n---\n\n## 一，Mac下利用Hexo+GitHub轻松搭建自己的博客\n### Hexo安装\n#### 1，基本流程：\n###### 1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew\n###### 2.homebrew安装需要依赖ruby\n###### 3.安装顺序：homebrew---->node.js---->hexo\n#### 2，具体安装流程：\n##### 1,检查安装ruby终端命令：\t\n###### 检查是否安装ruby \n    ruby -v\n###### 如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\n    \n##### 2,安装homebrew终端命令：\t \n                  \n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n##### 3,安装nodejs终端命令：\n\n\tbrew install node\n\t\n###### 在安装nodejs过程中，提示如下警告：\n\tYou have Xcode 8 installed without the CLT;\n###### 根据提示进行安装\n\t\t\n##### 4，安装hexo终端命令:\n\n\tsudo npm install -g hexo\n### Hexo安装成功\n\n### 本地工作空间\n###### 1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\n\tmkdir blog \t\t新建文件\n\tcd blog \t\t\t打开新建的文件\n\thexo init\t\t在当前文件夹中初始化hexo\n###### 2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\n\thexo generate \t/** 生成一套静态网页 **/\n\thexo server \t\t/** 在服务器上运行 **/\n###### 3，在浏览器中打开下面的地址，就可以看到默认的界面主页\n\thttp://localhost:4000\n### 本地工作空间创建完毕\n\n### 关联到GitHub\n###### 1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\n\tHexo的每一个功能的配置文件都是_config.yml， 具体说明看下面的注解：\n\t# Hexo Configuration\n\t## Docs: https://hexo.io/docs/configuration.html\n\t## Source: https://github.com/hexojs/hexo/\n \n\t# Site                 ##修改以适应搜索引擎的收录\n\ttitle: Hexo            ##定义网站的标题\n\tsubtitle:              ##定义网站的副标题\n\tdescription:           ##定义网站的描述\n\tauthor: jason jwl      ##定义网站的负责人\n\tlanguage:              ##定义网站的语言,默认zh-Hans\n\ttimezone:              ##定义网站的时区\n \n\t# URL\n\t## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\turl: http://yoursite.com   ##定义网站访问的域名\n\troot: /      ##定义所在Web文件夹在哪个目录\n\tpermalink: :year/:month/:day/:title/  ##定义时间格式\n\tpermalink_defaults:\n \n\t# Directory\n\tsource_dir: source   ##定义从哪个文件夹获取博客资料\n\tpublic_dir: public   ##定义生成静态网站到哪个文件夹\n \n\tarchive_dir: archives\n\tcategory_dir: categories\n\tcode_dir: downloads/code\n\ti18n_dir: :lang\n\tskip_render:\n \n\t# Writing\n\tnew_post_name: :title.md # File name of new posts\n\tdefault_layout: post\n\ttitlecase: false # Transform title into titlecase\n\texternal_link: true # Open external links in new tab\n\tfilename_case: 0\n\trender_drafts: false\n\tpost_asset_folder: false\n\trelative_link: false\n\tfuture: true\n\thighlight:\n  \tenable: true\n  \tline_number: true\n  \tauto_detect: false\n  \ttab_replace:\n \n\t# Category & Tag\n\tdefault_category: uncategorized\n\tcategory_map:\n\ttag_map:\n \n\t# Date / Time format\n\t## Hexo uses Moment.js to parse and display date\n\t## You can customize the date format as defined in\n\t## http://momentjs.com/docs/#/displaying/format/\n\tdate_format: YYYY-MM-DD\n\ttime_format: HH:mm:ss\n \n\t# Pagination\n\t## Set per_page to 0 to disable pagination\n\tper_page: 10  ##定义每一页多少条博客\n\tpagination_dir: page\n \n\t# Extensions\n\t## Plugins: https://hexo.io/plugins/\n\t## Themes: https://hexo.io/themes/\n\ttheme: landscape  ##定义使用的主题\n \n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \ttype:\n###### 那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\n\tdeploy:\n  \t\ttype: git\n  \t\trepo: https://github.com/xxx/xxx.github.io.git\n  \t\tbranch: master\n  （xxx为个人github的name）\n### 关联到GitHub完成\n\n### 让我们来创建一篇自己的博客吧\n###### 首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\n\thexo new post \"我的第一篇博客\"\n\t(注意，该文件可以使用Markdown的编辑文件编辑，Hexo会自动转化为静态页面)\n###### 然后输入：hexo generate 或者 hexo g \t/** 生成一套静态网页 **/\n###### 最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。\n### 创建一篇自己的博客完成\n\n### 如何访问GitHub上的静态页面呢\n###### 从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\n### 创建自己的GitHub Pages\n### 创建自己的GitHub Pages完成\n\n### 快速、简洁且高效的博客框架\n###### Hexo官网：\nhttps://hexo.io/zh-cn/\n\n### 一款比较漂亮的博客主题\n###### 资源地址[themes](https://hexo.io/themes/)\n###### 资源地址[theme](https://chaoo.oschina.io)\n\t\n \n\n\n\n\n\n\t\n\n\n\n\n\n\t\n\n","slug":"教你如何轻松搭建属于自己的博客","published":1,"updated":"2018-09-10T04:23:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlxc1z1i0000i6f3blxtlhan","content":"<h2 id=\"一，Mac下利用Hexo-GitHub轻松搭建自己的博客\"><a href=\"#一，Mac下利用Hexo-GitHub轻松搭建自己的博客\" class=\"headerlink\" title=\"一，Mac下利用Hexo+GitHub轻松搭建自己的博客\"></a>一，Mac下利用Hexo+GitHub轻松搭建自己的博客</h2><h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><h4 id=\"1，基本流程：\"><a href=\"#1，基本流程：\" class=\"headerlink\" title=\"1，基本流程：\"></a>1，基本流程：</h4><h6 id=\"1-hexo是基于node-js的，所以需要安装node-js，而安装node-js最好选择homebrew\"><a href=\"#1-hexo是基于node-js的，所以需要安装node-js，而安装node-js最好选择homebrew\" class=\"headerlink\" title=\"1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew\"></a>1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew</h6><h6 id=\"2-homebrew安装需要依赖ruby\"><a href=\"#2-homebrew安装需要依赖ruby\" class=\"headerlink\" title=\"2.homebrew安装需要依赖ruby\"></a>2.homebrew安装需要依赖ruby</h6><h6 id=\"3-安装顺序：homebrew—-gt-node-js—-gt-hexo\"><a href=\"#3-安装顺序：homebrew—-gt-node-js—-gt-hexo\" class=\"headerlink\" title=\"3.安装顺序：homebrew—-&gt;node.js—-&gt;hexo\"></a>3.安装顺序：homebrew—-&gt;node.js—-&gt;hexo</h6><h4 id=\"2，具体安装流程：\"><a href=\"#2，具体安装流程：\" class=\"headerlink\" title=\"2，具体安装流程：\"></a>2，具体安装流程：</h4><h5 id=\"1-检查安装ruby终端命令：\"><a href=\"#1-检查安装ruby终端命令：\" class=\"headerlink\" title=\"1,检查安装ruby终端命令：\"></a>1,检查安装ruby终端命令：</h5><h6 id=\"检查是否安装ruby\"><a href=\"#检查是否安装ruby\" class=\"headerlink\" title=\"检查是否安装ruby\"></a>检查是否安装ruby</h6><pre><code>ruby -v\n</code></pre><h6 id=\"如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\"><a href=\"#如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\" class=\"headerlink\" title=\"如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\"></a>如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。</h6><h5 id=\"2-安装homebrew终端命令：\"><a href=\"#2-安装homebrew终端命令：\" class=\"headerlink\" title=\"2,安装homebrew终端命令：\"></a>2,安装homebrew终端命令：</h5><pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n</code></pre><h5 id=\"3-安装nodejs终端命令：\"><a href=\"#3-安装nodejs终端命令：\" class=\"headerlink\" title=\"3,安装nodejs终端命令：\"></a>3,安装nodejs终端命令：</h5><pre><code>brew install node\n</code></pre><h6 id=\"在安装nodejs过程中，提示如下警告：\"><a href=\"#在安装nodejs过程中，提示如下警告：\" class=\"headerlink\" title=\"在安装nodejs过程中，提示如下警告：\"></a>在安装nodejs过程中，提示如下警告：</h6><pre><code>You have Xcode 8 installed without the CLT;\n</code></pre><h6 id=\"根据提示进行安装\"><a href=\"#根据提示进行安装\" class=\"headerlink\" title=\"根据提示进行安装\"></a>根据提示进行安装</h6><h5 id=\"4，安装hexo终端命令\"><a href=\"#4，安装hexo终端命令\" class=\"headerlink\" title=\"4，安装hexo终端命令:\"></a>4，安装hexo终端命令:</h5><pre><code>sudo npm install -g hexo\n</code></pre><h3 id=\"Hexo安装成功\"><a href=\"#Hexo安装成功\" class=\"headerlink\" title=\"Hexo安装成功\"></a>Hexo安装成功</h3><h3 id=\"本地工作空间\"><a href=\"#本地工作空间\" class=\"headerlink\" title=\"本地工作空间\"></a>本地工作空间</h3><h6 id=\"1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\"><a href=\"#1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\" class=\"headerlink\" title=\"1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\"></a>1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：</h6><pre><code>mkdir blog         新建文件\ncd blog             打开新建的文件\nhexo init        在当前文件夹中初始化hexo\n</code></pre><h6 id=\"2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\"><a href=\"#2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\" class=\"headerlink\" title=\"2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\"></a>2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：</h6><pre><code>hexo generate     /** 生成一套静态网页 **/\nhexo server         /** 在服务器上运行 **/\n</code></pre><h6 id=\"3，在浏览器中打开下面的地址，就可以看到默认的界面主页\"><a href=\"#3，在浏览器中打开下面的地址，就可以看到默认的界面主页\" class=\"headerlink\" title=\"3，在浏览器中打开下面的地址，就可以看到默认的界面主页\"></a>3，在浏览器中打开下面的地址，就可以看到默认的界面主页</h6><pre><code>http://localhost:4000\n</code></pre><h3 id=\"本地工作空间创建完毕\"><a href=\"#本地工作空间创建完毕\" class=\"headerlink\" title=\"本地工作空间创建完毕\"></a>本地工作空间创建完毕</h3><h3 id=\"关联到GitHub\"><a href=\"#关联到GitHub\" class=\"headerlink\" title=\"关联到GitHub\"></a>关联到GitHub</h3><h6 id=\"1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\"><a href=\"#1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\" class=\"headerlink\" title=\"1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\"></a>1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。</h6><pre><code>Hexo的每一个功能的配置文件都是_config.yml， 具体说明看下面的注解：\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site                 ##修改以适应搜索引擎的收录\ntitle: Hexo            ##定义网站的标题\nsubtitle:              ##定义网站的副标题\ndescription:           ##定义网站的描述\nauthor: jason jwl      ##定义网站的负责人\nlanguage:              ##定义网站的语言,默认zh-Hans\ntimezone:              ##定义网站的时区\n\n# URL\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://yoursite.com   ##定义网站访问的域名\nroot: /      ##定义所在Web文件夹在哪个目录\npermalink: :year/:month/:day/:title/  ##定义时间格式\npermalink_defaults:\n\n# Directory\nsource_dir: source   ##定义从哪个文件夹获取博客资料\npublic_dir: public   ##定义生成静态网站到哪个文件夹\n\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10  ##定义每一页多少条博客\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape  ##定义使用的主题\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre><h6 id=\"那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\"><a href=\"#那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\" class=\"headerlink\" title=\"那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\"></a>那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。</h6><pre><code>deploy:\n      type: git\n      repo: https://github.com/xxx/xxx.github.io.git\n      branch: master\n</code></pre><p>  （xxx为个人github的name）</p>\n<h3 id=\"关联到GitHub完成\"><a href=\"#关联到GitHub完成\" class=\"headerlink\" title=\"关联到GitHub完成\"></a>关联到GitHub完成</h3><h3 id=\"让我们来创建一篇自己的博客吧\"><a href=\"#让我们来创建一篇自己的博客吧\" class=\"headerlink\" title=\"让我们来创建一篇自己的博客吧\"></a>让我们来创建一篇自己的博客吧</h3><h6 id=\"首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\"><a href=\"#首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\" class=\"headerlink\" title=\"首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\"></a>首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：</h6><pre><code>hexo new post &quot;我的第一篇博客&quot;\n(注意，该文件可以使用Markdown的编辑文件编辑，Hexo会自动转化为静态页面)\n</code></pre><h6 id=\"然后输入：hexo-generate-或者-hexo-g-生成一套静态网页\"><a href=\"#然后输入：hexo-generate-或者-hexo-g-生成一套静态网页\" class=\"headerlink\" title=\"然后输入：hexo generate 或者 hexo g     / 生成一套静态网页 /\"></a>然后输入：hexo generate 或者 hexo g     /<strong> 生成一套静态网页 </strong>/</h6><h6 id=\"最后将该页面同步到GitHub上去，输入Hexo-deploy-或者-Hexo-d-该静态页面就会同步到GitHub上。\"><a href=\"#最后将该页面同步到GitHub上去，输入Hexo-deploy-或者-Hexo-d-该静态页面就会同步到GitHub上。\" class=\"headerlink\" title=\"最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。\"></a>最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。</h6><h3 id=\"创建一篇自己的博客完成\"><a href=\"#创建一篇自己的博客完成\" class=\"headerlink\" title=\"创建一篇自己的博客完成\"></a>创建一篇自己的博客完成</h3><h3 id=\"如何访问GitHub上的静态页面呢\"><a href=\"#如何访问GitHub上的静态页面呢\" class=\"headerlink\" title=\"如何访问GitHub上的静态页面呢\"></a>如何访问GitHub上的静态页面呢</h3><h6 id=\"从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\"><a href=\"#从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\" class=\"headerlink\" title=\"从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\"></a>从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？</h6><h3 id=\"创建自己的GitHub-Pages\"><a href=\"#创建自己的GitHub-Pages\" class=\"headerlink\" title=\"创建自己的GitHub Pages\"></a>创建自己的GitHub Pages</h3><h3 id=\"创建自己的GitHub-Pages完成\"><a href=\"#创建自己的GitHub-Pages完成\" class=\"headerlink\" title=\"创建自己的GitHub Pages完成\"></a>创建自己的GitHub Pages完成</h3><h3 id=\"快速、简洁且高效的博客框架\"><a href=\"#快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"快速、简洁且高效的博客框架\"></a>快速、简洁且高效的博客框架</h3><h6 id=\"Hexo官网：\"><a href=\"#Hexo官网：\" class=\"headerlink\" title=\"Hexo官网：\"></a>Hexo官网：</h6><p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<h3 id=\"一款比较漂亮的博客主题\"><a href=\"#一款比较漂亮的博客主题\" class=\"headerlink\" title=\"一款比较漂亮的博客主题\"></a>一款比较漂亮的博客主题</h3><h6 id=\"资源地址themes\"><a href=\"#资源地址themes\" class=\"headerlink\" title=\"资源地址themes\"></a>资源地址<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">themes</a></h6><h6 id=\"资源地址theme\"><a href=\"#资源地址theme\" class=\"headerlink\" title=\"资源地址theme\"></a>资源地址<a href=\"https://chaoo.oschina.io\" target=\"_blank\" rel=\"noopener\">theme</a></h6>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一，Mac下利用Hexo-GitHub轻松搭建自己的博客\"><a href=\"#一，Mac下利用Hexo-GitHub轻松搭建自己的博客\" class=\"headerlink\" title=\"一，Mac下利用Hexo+GitHub轻松搭建自己的博客\"></a>一，Mac下利用Hexo+GitHub轻松搭建自己的博客</h2><h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><h4 id=\"1，基本流程：\"><a href=\"#1，基本流程：\" class=\"headerlink\" title=\"1，基本流程：\"></a>1，基本流程：</h4><h6 id=\"1-hexo是基于node-js的，所以需要安装node-js，而安装node-js最好选择homebrew\"><a href=\"#1-hexo是基于node-js的，所以需要安装node-js，而安装node-js最好选择homebrew\" class=\"headerlink\" title=\"1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew\"></a>1.hexo是基于node.js的，所以需要安装node.js，而安装node.js最好选择homebrew</h6><h6 id=\"2-homebrew安装需要依赖ruby\"><a href=\"#2-homebrew安装需要依赖ruby\" class=\"headerlink\" title=\"2.homebrew安装需要依赖ruby\"></a>2.homebrew安装需要依赖ruby</h6><h6 id=\"3-安装顺序：homebrew—-gt-node-js—-gt-hexo\"><a href=\"#3-安装顺序：homebrew—-gt-node-js—-gt-hexo\" class=\"headerlink\" title=\"3.安装顺序：homebrew—-&gt;node.js—-&gt;hexo\"></a>3.安装顺序：homebrew—-&gt;node.js—-&gt;hexo</h6><h4 id=\"2，具体安装流程：\"><a href=\"#2，具体安装流程：\" class=\"headerlink\" title=\"2，具体安装流程：\"></a>2，具体安装流程：</h4><h5 id=\"1-检查安装ruby终端命令：\"><a href=\"#1-检查安装ruby终端命令：\" class=\"headerlink\" title=\"1,检查安装ruby终端命令：\"></a>1,检查安装ruby终端命令：</h5><h6 id=\"检查是否安装ruby\"><a href=\"#检查是否安装ruby\" class=\"headerlink\" title=\"检查是否安装ruby\"></a>检查是否安装ruby</h6><pre><code>ruby -v\n</code></pre><h6 id=\"如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\"><a href=\"#如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\" class=\"headerlink\" title=\"如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。\"></a>如果显示ruby的版本，说明电脑已经安装了ruby。否则，需要安装ruby。</h6><h5 id=\"2-安装homebrew终端命令：\"><a href=\"#2-安装homebrew终端命令：\" class=\"headerlink\" title=\"2,安装homebrew终端命令：\"></a>2,安装homebrew终端命令：</h5><pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n</code></pre><h5 id=\"3-安装nodejs终端命令：\"><a href=\"#3-安装nodejs终端命令：\" class=\"headerlink\" title=\"3,安装nodejs终端命令：\"></a>3,安装nodejs终端命令：</h5><pre><code>brew install node\n</code></pre><h6 id=\"在安装nodejs过程中，提示如下警告：\"><a href=\"#在安装nodejs过程中，提示如下警告：\" class=\"headerlink\" title=\"在安装nodejs过程中，提示如下警告：\"></a>在安装nodejs过程中，提示如下警告：</h6><pre><code>You have Xcode 8 installed without the CLT;\n</code></pre><h6 id=\"根据提示进行安装\"><a href=\"#根据提示进行安装\" class=\"headerlink\" title=\"根据提示进行安装\"></a>根据提示进行安装</h6><h5 id=\"4，安装hexo终端命令\"><a href=\"#4，安装hexo终端命令\" class=\"headerlink\" title=\"4，安装hexo终端命令:\"></a>4，安装hexo终端命令:</h5><pre><code>sudo npm install -g hexo\n</code></pre><h3 id=\"Hexo安装成功\"><a href=\"#Hexo安装成功\" class=\"headerlink\" title=\"Hexo安装成功\"></a>Hexo安装成功</h3><h3 id=\"本地工作空间\"><a href=\"#本地工作空间\" class=\"headerlink\" title=\"本地工作空间\"></a>本地工作空间</h3><h6 id=\"1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\"><a href=\"#1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\" class=\"headerlink\" title=\"1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：\"></a>1，创建本地文件夹，在该文件夹中启动Hexo工作，注意自己注意创建的目录：</h6><pre><code>mkdir blog         新建文件\ncd blog             打开新建的文件\nhexo init        在当前文件夹中初始化hexo\n</code></pre><h6 id=\"2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\"><a href=\"#2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\" class=\"headerlink\" title=\"2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：\"></a>2，我们先不写东西，只是生成hexo默认的一个界面，看下效果：</h6><pre><code>hexo generate     /** 生成一套静态网页 **/\nhexo server         /** 在服务器上运行 **/\n</code></pre><h6 id=\"3，在浏览器中打开下面的地址，就可以看到默认的界面主页\"><a href=\"#3，在浏览器中打开下面的地址，就可以看到默认的界面主页\" class=\"headerlink\" title=\"3，在浏览器中打开下面的地址，就可以看到默认的界面主页\"></a>3，在浏览器中打开下面的地址，就可以看到默认的界面主页</h6><pre><code>http://localhost:4000\n</code></pre><h3 id=\"本地工作空间创建完毕\"><a href=\"#本地工作空间创建完毕\" class=\"headerlink\" title=\"本地工作空间创建完毕\"></a>本地工作空间创建完毕</h3><h3 id=\"关联到GitHub\"><a href=\"#关联到GitHub\" class=\"headerlink\" title=\"关联到GitHub\"></a>关联到GitHub</h3><h6 id=\"1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\"><a href=\"#1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\" class=\"headerlink\" title=\"1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。\"></a>1，我们先不急着写博客，先解决一个问题，就是本地创建的博客文件，如何同步到GitHub中？这里有一种比较方便的方法，可以自动同步你的文件到GitHub。那就是使用Hexo的配置文件来处理。</h6><pre><code>Hexo的每一个功能的配置文件都是_config.yml， 具体说明看下面的注解：\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site                 ##修改以适应搜索引擎的收录\ntitle: Hexo            ##定义网站的标题\nsubtitle:              ##定义网站的副标题\ndescription:           ##定义网站的描述\nauthor: jason jwl      ##定义网站的负责人\nlanguage:              ##定义网站的语言,默认zh-Hans\ntimezone:              ##定义网站的时区\n\n# URL\n## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;\nurl: http://yoursite.com   ##定义网站访问的域名\nroot: /      ##定义所在Web文件夹在哪个目录\npermalink: :year/:month/:day/:title/  ##定义时间格式\npermalink_defaults:\n\n# Directory\nsource_dir: source   ##定义从哪个文件夹获取博客资料\npublic_dir: public   ##定义生成静态网站到哪个文件夹\n\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category &amp; Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10  ##定义每一页多少条博客\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape  ##定义使用的主题\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n</code></pre><h6 id=\"那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\"><a href=\"#那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\" class=\"headerlink\" title=\"那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。\"></a>那么，如何实现文件自动同步呢？注意配置文件的最后一部分，我们将在那里配置GitHub。</h6><pre><code>deploy:\n      type: git\n      repo: https://github.com/xxx/xxx.github.io.git\n      branch: master\n</code></pre><p>  （xxx为个人github的name）</p>\n<h3 id=\"关联到GitHub完成\"><a href=\"#关联到GitHub完成\" class=\"headerlink\" title=\"关联到GitHub完成\"></a>关联到GitHub完成</h3><h3 id=\"让我们来创建一篇自己的博客吧\"><a href=\"#让我们来创建一篇自己的博客吧\" class=\"headerlink\" title=\"让我们来创建一篇自己的博客吧\"></a>让我们来创建一篇自己的博客吧</h3><h6 id=\"首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\"><a href=\"#首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\" class=\"headerlink\" title=\"首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：\"></a>首先进入终端，使用cd命令进入到有Hexo框架的目录里面（bolg），输入：</h6><pre><code>hexo new post &quot;我的第一篇博客&quot;\n(注意，该文件可以使用Markdown的编辑文件编辑，Hexo会自动转化为静态页面)\n</code></pre><h6 id=\"然后输入：hexo-generate-或者-hexo-g-生成一套静态网页\"><a href=\"#然后输入：hexo-generate-或者-hexo-g-生成一套静态网页\" class=\"headerlink\" title=\"然后输入：hexo generate 或者 hexo g     / 生成一套静态网页 /\"></a>然后输入：hexo generate 或者 hexo g     /<strong> 生成一套静态网页 </strong>/</h6><h6 id=\"最后将该页面同步到GitHub上去，输入Hexo-deploy-或者-Hexo-d-该静态页面就会同步到GitHub上。\"><a href=\"#最后将该页面同步到GitHub上去，输入Hexo-deploy-或者-Hexo-d-该静态页面就会同步到GitHub上。\" class=\"headerlink\" title=\"最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。\"></a>最后将该页面同步到GitHub上去，输入Hexo deploy 或者 Hexo d,该静态页面就会同步到GitHub上。</h6><h3 id=\"创建一篇自己的博客完成\"><a href=\"#创建一篇自己的博客完成\" class=\"headerlink\" title=\"创建一篇自己的博客完成\"></a>创建一篇自己的博客完成</h3><h3 id=\"如何访问GitHub上的静态页面呢\"><a href=\"#如何访问GitHub上的静态页面呢\" class=\"headerlink\" title=\"如何访问GitHub上的静态页面呢\"></a>如何访问GitHub上的静态页面呢</h3><h6 id=\"从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\"><a href=\"#从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\" class=\"headerlink\" title=\"从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？\"></a>从《本地工作空间》我们知道，可以在自己电脑上启动Hexo服务器，然后通过固定的地址就可以看到我们自己定义的界面。我们后来自己创建的博客也会出现在这个界面，但毕竟是我们本地的服务器，访问上很不方便。如何让远在五湖四海的兄弟都能看到你最新的博客呢？对，答案就是将Hexo生成的静态页面托管到GitHub上。上面的工作，我们已经顺利的将静态页面托管到了GitHub上，接下来就是如何访问他们了？</h6><h3 id=\"创建自己的GitHub-Pages\"><a href=\"#创建自己的GitHub-Pages\" class=\"headerlink\" title=\"创建自己的GitHub Pages\"></a>创建自己的GitHub Pages</h3><h3 id=\"创建自己的GitHub-Pages完成\"><a href=\"#创建自己的GitHub-Pages完成\" class=\"headerlink\" title=\"创建自己的GitHub Pages完成\"></a>创建自己的GitHub Pages完成</h3><h3 id=\"快速、简洁且高效的博客框架\"><a href=\"#快速、简洁且高效的博客框架\" class=\"headerlink\" title=\"快速、简洁且高效的博客框架\"></a>快速、简洁且高效的博客框架</h3><h6 id=\"Hexo官网：\"><a href=\"#Hexo官网：\" class=\"headerlink\" title=\"Hexo官网：\"></a>Hexo官网：</h6><p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<h3 id=\"一款比较漂亮的博客主题\"><a href=\"#一款比较漂亮的博客主题\" class=\"headerlink\" title=\"一款比较漂亮的博客主题\"></a>一款比较漂亮的博客主题</h3><h6 id=\"资源地址themes\"><a href=\"#资源地址themes\" class=\"headerlink\" title=\"资源地址themes\"></a>资源地址<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">themes</a></h6><h6 id=\"资源地址theme\"><a href=\"#资源地址theme\" class=\"headerlink\" title=\"资源地址theme\"></a>资源地址<a href=\"https://chaoo.oschina.io\" target=\"_blank\" rel=\"noopener\">theme</a></h6>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-09-07T01:02:13.000Z","updated":"2018-09-07T01:02:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlxc1z1l0001i6f3g4ob0fvl","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjlxc1z1i0000i6f3blxtlhan","tag_id":"cjlxc1z1n0002i6f3s96gyeud","_id":"cjlxc1z1q0003i6f3cwmtfx8b"}],"Tag":[{"name":"hexo","_id":"cjlxc1z1n0002i6f3s96gyeud"}]}}